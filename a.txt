def parse_func(raw_input):\n",
    op_stack = deque()\n",
    operations = {'(':2, ')':2, '*':1, '/':1, '+':0, '-':0}\n",
    val_stack = deque()\n",
    itr = iter(range(len(raw_input)))\n",
    for x in itr:\n",
        symbol = raw_input[x]\n",
        if symbol in operations:\n",
            if symbol == ')':\n",
                while op_stack[-1] != \"(\":\n",
                    b, a = val_stack.pop(), val_stack.pop()\n",
                    val_stack.append(maths(op_stack.pop(), a, b))\n",
                op_stack.pop()\n",
            evaluating = True\n",
            while (len(op_stack) > 0 and evaluating):\n",
                top = op_stack.pop()\n",
                if top != '(' and operations[top] > operations[symbol]: \n",
                    if not operations[top] == 2:\n",
                        b, a = val_stack.pop(), val_stack.pop()\n",
                        val_stack.append(maths(top, a, b))\n",
                else:\n",
                    op_stack.append(top)\n",
                    evaluating = False\n",
            op_stack.append(symbol)\n",
        else:\n",
            while x+1 < len(raw_input) and not raw_input[x+1] in operations:\n",
                x += 1\n",
                symbol += raw_input[x]\n",
                next(itr)\n",
            val_stack.append(symbol)\n",
    while len(op_stack) > 0:\n",
        if op_stack[-1] == ')':\n",
            op_stack.pop()\n",
        else:\n",
            b, a = val_stack.pop(), val_stack.pop()\n",
            val_stack.append(maths(op_stack.pop(), a, b))\n",
    return val_stack.pop()"